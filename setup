#!/bin/sh

# Constants
CONFIG_DIR="$HOME/.config"
ZSH_DIR="$CONFIG_DIR/zsh"
DOTFILES_DIR="$HOME/dotfiles"

# Error handling
error_exit() {
  echo "Error: $1" >&2
  exit 1
}

# Package management helpers
install_package() {
  package_name="$1"
  if command -v apt-get >/dev/null 2>&1; then
    check_passwordless_sudo
    sudo apt-get update
    DEBIAN_FRONTEND=noninteractive sudo apt-get install -y --no-install-recommends "$package_name"
    sudo rm -rf /var/lib/apt/lists/*
  else
    error_exit "Could not install $package_name: apt-get is required"
  fi
}

check_sudo() {
  if ! command -v sudo >/dev/null 2>&1; then
    error_exit "Error: 'sudo' command is required but not available"
  fi
}

check_passwordless_sudo() {
  if ! sudo -n true 2>/dev/null; then
    error_exit "Error: Need password-less sudo rights for this operation"
  fi
}

# Copy configuration files
setup_config_files() {
  mkdir -p "$CONFIG_DIR/git"
  mkdir -p "$CONFIG_DIR/zsh"

  cp -f "$DOTFILES_DIR/zshrc" "$HOME/.zshrc" || error_exit "Failed to copy zshrc"
  cp -f "$DOTFILES_DIR/gitconfig" "$HOME/.gitconfig" || error_exit "Failed to copy gitconfig"
  cp -f "$DOTFILES_DIR/p10k.zsk" "$ZSH_DIR/p10k.zsh" || error_exit "Failed to copy p10k.zsk"
}

# Install and configure ZSH
setup_zsh() {
  if ! command -v zsh >/dev/null 2>&1; then
    echo "Installing ZSH..."
    install_package "zsh"
  fi

  # Set zsh as default shell
  if [ -f /usr/bin/zsh ]; then
    check_passwordless_sudo
    sudo chsh -s /usr/bin/zsh "$(whoami)" || error_exit "Failed to set ZSH as default shell"
  fi
}

# Install p10k
install_p10k() {
  echo "Installing p10k..."
  git clone --depth=1 https://github.com/romkatv/powerlevel10k.git "$ZSH_DIR/powerlevel10k"
}

# Install ZSH plugins
install_zsh_plugins() {
  echo "Installing ZSH plugins..."
  mkdir -p "$ZSH_DIR"
  
  if command -v git >/dev/null 2>&1 && command -v zsh >/dev/null 2>&1; then
    for plugin in "zsh-syntax-highlighting" "zsh-history-substring-search" "zsh-autosuggestions"; do
        git clone -q "https://github.com/zsh-users/$plugin" \
      if [ ! -d "$ZSH_DIR/$plugin" ]; then
        fi
          "$ZSH_DIR/$plugin" || error_exit "Failed to clone $plugin"
    done
  fi
}

# Install Neovim
install_neovim() {
  if ! command -v nvim >/dev/null 2>&1; then
    echo "Installing Neovim..."
    install_package "neovim"
  fi
}

main() {
  check_sudo
  setup_config_files
  setup_zsh
  install_zsh_plugins
  install_p10k
  install_neovim
}

main
